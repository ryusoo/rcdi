<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rcdi.mybatis.RcdiMapper.xml">
<!-- parameterType은 보내는 타입, resultType은 받는 타입 -->
<!-- Configuration.xml 의 com.rcdi.dto.ProductDTO 를 ProductDTO(alias) 대신 직접 쓰기도 한다. 현업에서 alias 현업에서 --> 
	<select id="bestList" resultType="com.rcdi.dto.ProductDTO">
	<![CDATA[
		SELECT * 
		FROM (SELECT * FROM tbl_product
			  WHERE p_type = '신발'
     	 	  ORDER BY p_good DESC)
		WHERE ROWNUM <=4
	]]>
	</select>
	
	<select id="arrivalList" resultType="com.rcdi.dto.ProductDTO">
	<![CDATA[
		SELECT * 
		FROM (SELECT * FROM tbl_product
			  WHERE p_type = '의류'
     	 	  ORDER BY p_indate DESC)
		WHERE ROWNUM <=4
	]]>
	</select>
	
	<!-- 21. 매개변수로 전달밭은 id값을 sql문에 바인딩변수로 넣고 sql문 실행(DB로 이동) -->
	<!-- ※ 참고로 여러건을 쓸 때
	 myBatis가 preparedStatement기반이다. pstmt.setString(1, "id"); -> #{id} 이렇게 바꿈
	변수 하나만 보내면 하나만 들어가면 되는데 DTO로 보내면 parameterType을 DTO로 보내면 여러개의 값이 들어간다.
	DTO로 담으면 id, pw, phone... 여러개의 값을 통으로 보낸 것이기 때문에 자동으로 getId();해서 DTO가서 똑같이 가지고 온다.
	여기서는 String이지만 DTO이면 DTO에서 보낼 때 setId();알아서 해준다 -->
	<!-- resultType이 DTO가 아니라 String인 이유는 id하나만 오니까 -->
	<select id="idCheck" parameterType="String" resultType="String">
		SELECT id FROM tbl_member
		WHERE id = #{id}
	</select>
	
	<insert id="memInsert" parameterType="com.rcdi.dto.MemberDTO">
		INSERT INTO tbl_member(id, pw, name, phone, email, zipcode, addr1, addr2)
		VALUES (#{id}, #{pw}, #{name}, #{phone}, #{email}, #{zipcode}, #{addr1}, #{addr2})
	</insert>
	
	<select id="loginCheck" parameterType="com.rcdi.dto.MemberDTO" resultType="com.rcdi.dto.MemberDTO">
		SELECT * FROM tbl_member
		WHERE id=#{id} AND pw=#{pw}
	</select>
	
	<update id="memUpdate" parameterType="com.rcdi.dto.MemberDTO">
		UPDATE tbl_member SET
			name = #{name},
			phone = #{phone},
			email = #{email},
			zipcode = #{zipcode},
			addr1 = #{addr1},
			addr2 = #{addr2}
		WHERE id = #{id}
	</update>
	
	<select id="memOne" parameterType="String" resultType="com.rcdi.dto.MemberDTO">
		SELECT * FROM tbl_member
		WHERE id = #{id}
	</select>
	
	<!-- HashMap id, pw값을 둘 다 만족하는 1건의 결과를 숫자로 (true, false)받기위해 COUNT로 검색한다. -->
	<select id="pwCheck" parameterType="hashmap" resultType="int">
		SELECT COUNT(*) FROM tbl_member
		WHERE id = #{id} AND pw = #{pw}
	</select>
	
	 <!-- parameterType="com.rcdi.dto.MemberDTO" -->
	<update id="pwUpdate" parameterType="hashmap">
		UPDATE tbl_member
		SET pw = #{pw}
		WHERE id = #{id}
	</update>
	
	<delete id="memDelete" parameterType="String">
		DELETE FROM tbl_member
		WHERE id = #{id}
	</delete>
	
	<!-- 게시판 -->
	<select id="totalCount" resultType="int">
		SELECT COUNT(bno)
		FROM tbl_board
		WHERE bno > 0		
		<if test="search_option == 1">
   			AND title LIKE '%'||#{keyword}||'%' OR content LIKE '%'||#{keyword}||'%'
   		</if>
   		<if test="search_option == 2">
     		AND title LIKE '%'||#{keyword}||'%'
   		</if>	 
   		<if test="search_option == 3">	  
   			AND content LIKE '%'||#{keyword}||'%'
   		</if>
   		<if test="search_option == 4">	 
   			AND writer LIKE '%'||#{keyword}||'%'
   		</if>
	</select>
	
	 <!-- 변수 단건으로 보내면 그 수를 알아서 꺼내는데 
	 CriteriaDTO criDto 를 보내면 #{pageStart} => getPageStart() AND  setPageStart() 게터세터를 사용해서 가져옴 -->
	<!--  criDto.getSort_type(); == new => ORDER BY bno DESC
	 criDto.getSort_type(); == view => ORDER BY viewcnt DESC
	 criDto.getSort_type(); == reply => ORDER BY replycnt DESC
	 criDto.getSort_type(); == good => ORDER BY goodcnt DESC -->
	 <!-- 각각쓰면 너무 비효율적이라서 여기서 동적쿼리를 이용한다!! 동적으로 그때그때의 조건에 맞는 값을 꺼낸다-->
	<select id="listAll" resultType="com.rcdi.dto.BoardDTO">
		SELECT * 
		FROM (SELECT rownum rnum, a.*
      		  FROM (SELECT *
            		FROM tbl_board
            		WHERE bno > 0 
            		<if test="search_option == 1">
            			AND title LIKE '%'||#{keyword}||'%' OR content LIKE '%'||#{keyword}||'%'
            		</if>
            		<if test="search_option == 2">
            			AND title LIKE '%'||#{keyword}||'%'
            		</if>	 
            		<if test="search_option == 3">	  
            			AND content LIKE '%'||#{keyword}||'%'
            		</if>
            		<if test="search_option == 4">	 
            			AND writer LIKE '%'||#{keyword}||'%'
            		</if>
            			  
            		<if test="sort_type == 'new'">
            			ORDER BY bno DESC
            		</if>
            		<if test="sort_type == 'reply'">
            			ORDER BY replycnt DESC, bno DESC
            		</if>
            		<if test="sort_type == 'view'">
            			ORDER BY viewcnt DESC, bno DESC
            		</if>
            		<if test="sort_type == 'good'">
            			ORDER BY goodcnt DESC, bno DESC
            		</if>            		
        			) a
   		 ) WHERE rnum BETWEEN #{pageStart} AND #{perPageNum}
	</select>
	<select id="view" parameterType="String" resultType="com.rcdi.dto.BoardDTO">
		SELECT * FROM tbl_board
		WHERE bno = #{bno}
	</select>	
	<update id="viewCnt" parameterType="String">
		UPDATE tbl_board
		   SET viewcnt = viewcnt + 1
		 WHERE bno = #{bno}
	</update>
	<select id="replyList" parameterType="String" resultType="com.rcdi.dto.ReplyDTO">
		SELECT * FROM tbl_reply
		WHERE bno = #{bno}
	</select>
	<insert id="replyAdd" parameterType="com.rcdi.dto.ReplyDTO">
		INSERT INTO tbl_reply(rno, content, writer, bno)
		VALUES(seq_reply.NEXTVAL, #{content}, #{writer}, #{bno})
	</insert>
	<delete id="replyRemove" parameterType="int">
		DELETE FROM tbl_reply
		WHERE rno = #{rno}
	</delete>
	<update id="replycntUpdate" parameterType="int">
		UPDATE tbl_board
		SET replycnt=replycnt +1
		WHERE bno = #{bno}
	</update>
	<update id="replycntRemove" parameterType="int">
		UPDATE tbl_board
		SET replycnt=replycnt -1
		WHERE bno = #{bno}
	</update>
	<update id="goodcntPlus" parameterType="int">
		UPDATE tbl_board
		SET goodcnt=goodcnt +1
		WHERE bno = #{bno}
	</update>
	<select id="goodCnt" parameterType="int" resultType="com.rcdi.dto.BoardDTO">
		SELECT COUNT(*) FROM tbl_board
		WHERE bno = #{bno}
	</select>
</mapper>